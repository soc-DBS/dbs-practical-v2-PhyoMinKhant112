generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model course {
  crseCode  String   @id @map("crse_code") @db.VarChar(5)
  crseName  String   @map("crse_name") @db.VarChar(100)
  offeredBy String   @map("offered_by") @db.VarChar(5)
  crseFee   Decimal  @map("crse_fee") @db.Decimal(7, 2)
  labFee    Decimal? @map("lab_fee") @db.Decimal(7, 2)

  departmentOfferedBy department @relation(fields: [offeredBy], references: [deptCode], onDelete: NoAction, onUpdate: NoAction, map: "course_dept_fk")

  student student[] @relation("courseCodeToStudent") 
}

model department {
  deptCode         String    @id @map("dept_code") @db.VarChar(5)
  deptName         String    @map("dept_name") @db.VarChar(100)
  hod              String    @db.Char(4)
  noOfStaff        Int?      @map("no_of_staff")
  maxStaffStrength Int?      @map("max_staff_strength")
  budget           Decimal?  @db.Decimal(9, 2)
  expenditure      Decimal?  @db.Decimal(9, 2)
  hodApptDate      DateTime? @map("hod_appt_date") @db.Date

  departmentHodToStaff staff @relation("departmentHodToStaff", fields: [hod], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map: "dept_hod_fk")
  staffDeptCodeToDepartment staff[] @relation("staffDeptCodeToDepartment")

  departmentOfferedBy course[]
}

model staff {
  staffNo           String   @id @map("staff_no") @db.Char(4)
  staffName         String   @map("staff_name") @db.VarChar(100)
  supervisorStaffNo String?  @map("supervisor_staff_no") @db.Char(4)
  dob               DateTime @db.Date
  grade             String   @db.VarChar(5)
  maritalStatus     String   @map("marital_status") @db.VarChar(1)
  pay               Decimal? @db.Decimal(7, 2)
  allowance         Decimal? @db.Decimal(7, 2)
  hourlyRate        Decimal? @map("hourly_rate") @db.Decimal(7, 2)
  gender            String   @db.Char(1)
  citizenship       String   @db.VarChar(10)
  joinYr            Int      @map("join_yr")
  deptCode          String   @map("dept_code") @db.VarChar(5)
  typeOfEmployment  String   @map("type_of_employment") @db.VarChar(2)
  highestQln        String   @map("highest_qln") @db.VarChar(10)
  designation       String   @db.VarChar(20)
  
  departmentHodToStaff department[] @relation("departmentHodToStaff")
  staffDeptCodeToDepartment department @relation("staffDeptCodeToDepartment", fields: [deptCode], references: [deptCode], onDelete: NoAction, onUpdate: NoAction, map: "staff_dept_code_fk")
  staffDependent staffDependent[]
}

model staffBackup {
  staffNo          String   @id @map("staff_no") @db.Char(4)
  staffName        String   @map("staff_name") @db.VarChar(100)
  supervisor       String?  @db.Char(4)
  dob              DateTime @db.Date
  grade            String   @db.VarChar(5)
  maritalStatus    String   @map("marital_status") @db.VarChar(1)
  pay              Decimal? @db.Decimal(7, 2)
  allowance        Decimal? @db.Decimal(7, 2)
  hourlyRate       Decimal? @map("hourly_rate") @db.Decimal(7, 2)
  gender           String   @db.Char(1)
  citizenship      String   @db.VarChar(10)
  joinYr           Int      @map("join_yr")
  deptCode         String   @map("dept_code") @db.VarChar(5)
  typeOfEmployment String   @map("type_of_employment") @db.VarChar(2)
  highestQln       String   @map("highest_qln") @db.VarChar(10)
  designation      String   @db.VarChar(20)

  @@map("staff_backup")
}

model userAccount {
  id        Int    @id
  accountNo String @map("account_no") @db.VarChar(6)
  role      Int
  password  String @db.VarChar(255)

  @@map("user_account")
}

model userRole {
  id   Int    @id
  name String @db.VarChar(25)

  @@map("user_role")
}

model module {
  modCode String @id @map("mod_code") @db.VarChar(10)
  modName String @map("mod_name") @db.VarChar(100)
  creditUnit Int @map("credit_unit")
  modCoord String? @map("mod_coord") @db.Char(4)

  preRequisiteModCode preRequisite[] @relation("moduleCodeToPreRequisiteModCode")
  preRequisiteRequisite preRequisite[] @relation("moduleCodeToPreRequisiteRequisite")

  studModPerformance studModPerformance[] @relation("modCodeToStudModPerformance")

}

model staffDependent {
  staffNo        String @map("staff_no") @db.Char(4)
  dependentName  String @map("dependent_name") @db.VarChar(30)
  relationship   String @map("relatioship") @db.VarChar(20)

  staff staff  @relation(fields: [staffNo], references: [staffNo], onDelete: NoAction, onUpdate: NoAction, map: "staff_dependent_staff_no_fk")

  @@id([staffNo, dependentName])
  @@map("staff_dependent")
}

model preRequisite {
  modCode  String @db.VarChar(10) @map("mod_code")
  requisite String @db.VarChar(10)

  preRequisiteModCode module @relation("moduleCodeToPreRequisiteModCode", fields: [modCode], references: [modCode], onDelete: NoAction, onUpdate: NoAction,  map: "pre_requisite_mod_code_fk")
  preRequisiteRequisite module @relation("moduleCodeToPreRequisiteRequisite", fields: [requisite], references: [modCode], onDelete: NoAction, onUpdate: NoAction, map: "pre_requisite_requisite_fk")

  @@id([modCode, requisite])
  @@map("pre_requisite")
}

model country {
  countryName String @id @db.VarChar(30) @map("country_name")
  language String @db.VarChar(30)

  student student[] @relation("nationalityToStudent")

  @@map("country")
}

model student {
  admNo            String   @id @db.Char(4)         @map("adm_no")
  studName         String   @db.VarChar(90)         @map("stud_name")
  gender            String   @db.Char(1)             @map("gender")
  address           String   @db.VarChar(100)        @map("address")
  mobilePhone      String   @db.Char(8)             @map("mobile_phone")
  homePhone        String   @db.Char(8)             @map("home_phone")
  dob               DateTime @db.Date                @map("dob")
  nationality       String   @db.VarChar(20)         @map("nationality")
  crseCode          String   @db.VarChar(5)          @map("crse_code")
  
  course course @relation("courseCodeToStudent", fields: [crseCode], references: [crseCode], onDelete: NoAction, onUpdate: NoAction, map: "student_crseCode_fk")

  country country @relation("nationalityToStudent", fields: [nationality], references: [countryName], onDelete: NoAction, onUpdate: NoAction, map: "student_countryName_fk")

  studModPerformance studModPerformance[] @relation("admNoToStudMonPerformance")

  @@map("student")
}

model studModPerformance {
  admNo String @db.Char(4) @map("adm_no")
  modRegistered String @db.VarChar(10) @map("mod_registered")
  mark Int @map("mark")
  grade String @db.Char(2) @map("grade")

  student student  @relation("admNoToStudMonPerformance", fields: [admNo], references: [admNo], map: "studentModPerformance_student_fk")

  module module @relation("modCodeToStudModPerformance", fields: [modRegistered], references: [modCode], map: "studModPerformance_modRegistered_fk")

  @@id([admNo, modRegistered])
  @@map("stud_mod_performance")
}


